services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - air_quality_network

  data_crawler:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    volumes:
      - ./data:/app/data
    env_file:
      - .env
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - air_quality_network
    command: ["uvicorn", "data_crawler.data_crawler:app", "--host", "0.0.0.0", "--port", "8081"]

  data_cleaner:
    build:
      context: .
      dockerfile: Dockerfile.cleaner
    volumes:
      - ./data:/app/data
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      data_crawler:
        condition: service_started
    restart: unless-stopped
    networks:
      - air_quality_network
    command: ["uvicorn", "data_cleaner.clean_data:app", "--host", "0.0.0.0", "--port", "8080"]

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      data_cleaner:
        condition: service_started
    restart: unless-stopped
    networks:
      - air_quality_network
    command: ["uvicorn", "api.api:app", "--host", "0.0.0.0", "--port", "8000"]

  

  n8n:
    image: n8nio/n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=http
      - N8N_EMAIL=${N8N_EMAIL}
      - N8N_PASSWORD=${N8N_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_USER_MANAGEMENT_DISABLED=false
    volumes:
      - ./n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped
    networks:
      - air_quality_network

volumes:
  postgres_data:
    name: air_quality_postgres_data

networks:
  air_quality_network:
    name: air_quality_network