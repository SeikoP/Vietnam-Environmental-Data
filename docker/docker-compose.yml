services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Changed host port from 5433 to 15433
    env_file:
      - ../configs/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - air_quality_network

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - air_quality_network
    command: ["uvicorn", "api.api:app", "--host", "0.0.0.0", "--port", "8000"]

  air_crawler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.air_crawler
    env_file: ../configs/.env
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - air_quality_network
    volumes:
      - ../data_storage/air/raw:/app/data_export

  water_crawler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.water_crawler
    env_file: ../configs/.env
    ports:
      - "18082:8082"   # Change host port to 18082 (or any free port)
    restart: unless-stopped
    networks:
      - air_quality_network
    volumes:
      - ../data_storage/water/raw:/app/data_export

  soil_crawler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.soil_crawler
    env_file: ../configs/.env
    ports:
      - "8083:8083"
    restart: unless-stopped
    networks:
      - air_quality_network
    volumes:
      - ../data_storage/soil/raw:/app/data_export

  climate_crawler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.climate_crawler
    env_file: ../configs/.env
    ports:
      - "8084:8084"
    restart: unless-stopped
    networks:
      - air_quality_network
    volumes:
      - ../data_storage/climate/raw:/app/data_export

  n8n:
    image: n8nio/n8n
    ports:
      - "5678:5678"
    user: "1000:1000"
    volumes:
      - D:\Project_Dp-15\Air_Quality\workflow\n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped
    networks:
      - air_quality_network
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=http
      - N8N_EMAIL=${N8N_EMAIL}
      - N8N_PASSWORD=${N8N_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_CUSTOM_EXTENSIONS=@n8n/n8n-nodes-langchain

  unified_cleaner:
    build:
      context: ..
      dockerfile: docker/Dockerfile.cleaner
    env_file: ../configs/.env
    ports:
      - "8090:8090"
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - ../data_cleaner/data:/app/data
    networks:
      - air_quality_network

volumes:
  postgres_data:
    name: air_quality_postgres_data
    external: true
  pgdata:

networks:
  air_quality_network:
    name: air_quality_network
    external: true

# Để build lại image n8n (và các service custom build khác), sử dụng lệnh:
# docker compose up --build n8n

# Nếu muốn build và chạy toàn bộ hệ thống:
# docker compose up --build

# Nếu chỉ muốn build lại image n8n mà không chạy:
# docker compose build n8n
# Nếu chỉ muốn build lại image n8n mà không chạy:
# docker compose build n8n
